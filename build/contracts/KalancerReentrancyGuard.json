{
  "contractName": "KalancerReentrancyGuard",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Kalancer Labs (and OpenZeppelin)\",\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {_lock_} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `_lock_` guard, functions marked as `_lock_` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `_lock_` entry points to them. Also adds a _lockview_ modifier, which doesn't create a lock, but fails   if another _lock_ call is in progress\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Protect against reentrant calls (and also selectively protect view functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/vyper/Downloads/Work Projects/avengers/kalancer-action/contracts/test/KalancerReentrancyGuard.sol\":\"KalancerReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/vyper/Downloads/Work Projects/avengers/kalancer-action/contracts/test/KalancerReentrancyGuard.sol\":{\"keccak256\":\"0x85e1c4506266e5b36adb480cf5012213fb369ab05c983cdc7d07e602f00c9737\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ccdce30aad47fe5dc9ab4f736aae1dcd96e6feb0ea0438a9c907408c906149fa\",\"dweb:/ipfs/Qmao6DSJtq6dcWbqbbt4MTRmbVxWm1c6MCbAUvg8CYFrPp\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.6.12;\n\n/**\n * @author Kalancer Labs (and OpenZeppelin)\n * @title Protect against reentrant calls (and also selectively protect view functions)\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `_lock_` guard, functions marked as\n * `_lock_` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `_lock_` entry\n * points to them.\n *\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\n *   if another _lock_ call is in progress\n */\ncontract KalancerReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint private constant _NOT_ENTERED = 1;\n    uint private constant _ENTERED = 2;\n\n    uint private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `_lock_` function from another `_lock_`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `_lock_` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier lock() {\n        // On the first call to _lock_, _notEntered will be true\n        require(_status != _ENTERED, \"ERR_REENTRY\");\n\n        // Any calls to _lock_ after this point will fail\n        _status = _ENTERED;\n        _;\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\n     *      should not be called while a _lock_ function is running\n     */\n     modifier viewlock() {\n        require(_status != _ENTERED, \"ERR_REENTRY_VIEW\");\n        _;\n     }\n}\n",
  "sourcePath": "/home/vyper/Downloads/Work Projects/avengers/kalancer-action/contracts/test/KalancerReentrancyGuard.sol",
  "ast": {
    "absolutePath": "/home/vyper/Downloads/Work Projects/avengers/kalancer-action/contracts/test/KalancerReentrancyGuard.sol",
    "exportedSymbols": {
      "KalancerReentrancyGuard": [
        8273
      ]
    },
    "id": 8274,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 8223,
        "literals": [
          "solidity",
          "0.6",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "45:23:15"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 8224,
          "nodeType": "StructuredDocumentation",
          "src": "70:760:15",
          "text": " @author Kalancer Labs (and OpenZeppelin)\n @title Protect against reentrant calls (and also selectively protect view functions)\n @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `_lock_` guard, functions marked as\n `_lock_` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `_lock_` entry\n points to them.\n Also adds a _lockview_ modifier, which doesn't create a lock, but fails\n   if another _lock_ call is in progress"
        },
        "fullyImplemented": true,
        "id": 8273,
        "linearizedBaseContracts": [
          8273
        ],
        "name": "KalancerReentrancyGuard",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 8227,
            "mutability": "constant",
            "name": "_NOT_ENTERED",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 8273,
            "src": "1618:38:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8225,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1618:4:15",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 8226,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1655:1:15",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "private"
          },
          {
            "constant": true,
            "id": 8230,
            "mutability": "constant",
            "name": "_ENTERED",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 8273,
            "src": "1662:34:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8228,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1662:4:15",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 8229,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1695:1:15",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 8232,
            "mutability": "mutable",
            "name": "_status",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 8273,
            "src": "1703:20:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8231,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1703:4:15",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 8239,
              "nodeType": "Block",
              "src": "1754:39:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 8237,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 8235,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8232,
                      "src": "1764:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 8236,
                      "name": "_NOT_ENTERED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8227,
                      "src": "1774:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1764:22:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8238,
                  "nodeType": "ExpressionStatement",
                  "src": "1764:22:15"
                }
              ]
            },
            "documentation": null,
            "id": 8240,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 8233,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1742:2:15"
            },
            "returnParameters": {
              "id": 8234,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1754:0:15"
            },
            "scope": 8273,
            "src": "1730:63:15",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 8259,
              "nodeType": "Block",
              "src": "2166:387:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 8246,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 8244,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8232,
                          "src": "2249:7:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 8245,
                          "name": "_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8230,
                          "src": "2260:8:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2249:19:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552525f5245454e545259",
                        "id": 8247,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2270:13:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8186a91a8af60eddd7d544682e1b6922f650fc04d86fd0e4ee40391168ca67e4",
                          "typeString": "literal_string \"ERR_REENTRY\""
                        },
                        "value": "ERR_REENTRY"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8186a91a8af60eddd7d544682e1b6922f650fc04d86fd0e4ee40391168ca67e4",
                          "typeString": "literal_string \"ERR_REENTRY\""
                        }
                      ],
                      "id": 8243,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2241:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8248,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2241:43:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8249,
                  "nodeType": "ExpressionStatement",
                  "src": "2241:43:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 8252,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 8250,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8232,
                      "src": "2353:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 8251,
                      "name": "_ENTERED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8230,
                      "src": "2363:8:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2353:18:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8253,
                  "nodeType": "ExpressionStatement",
                  "src": "2353:18:15"
                },
                {
                  "id": 8254,
                  "nodeType": "PlaceholderStatement",
                  "src": "2381:1:15"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 8257,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 8255,
                      "name": "_status",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8232,
                      "src": "2524:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 8256,
                      "name": "_NOT_ENTERED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8227,
                      "src": "2534:12:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2524:22:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 8258,
                  "nodeType": "ExpressionStatement",
                  "src": "2524:22:15"
                }
              ]
            },
            "documentation": {
              "id": 8241,
              "nodeType": "StructuredDocumentation",
              "src": "1799:346:15",
              "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `_lock_` function from another `_lock_`\n function is not supported. It is possible to prevent this from happening\n by making the `_lock_` function external, and make it call a\n `private` function that does the actual work."
            },
            "id": 8260,
            "name": "lock",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 8242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2163:2:15"
            },
            "src": "2150:403:15",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 8271,
              "nodeType": "Block",
              "src": "2752:77:15",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 8266,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 8264,
                          "name": "_status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8232,
                          "src": "2770:7:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 8265,
                          "name": "_ENTERED",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 8230,
                          "src": "2781:8:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2770:19:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4552525f5245454e5452595f56494557",
                        "id": 8267,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2791:18:15",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_90d44b4d073c5a7a1a92e18ca806eb93602df9353ab337b45f16cd7ce4401c34",
                          "typeString": "literal_string \"ERR_REENTRY_VIEW\""
                        },
                        "value": "ERR_REENTRY_VIEW"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_90d44b4d073c5a7a1a92e18ca806eb93602df9353ab337b45f16cd7ce4401c34",
                          "typeString": "literal_string \"ERR_REENTRY_VIEW\""
                        }
                      ],
                      "id": 8263,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2762:7:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 8268,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2762:48:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 8269,
                  "nodeType": "ExpressionStatement",
                  "src": "2762:48:15"
                },
                {
                  "id": 8270,
                  "nodeType": "PlaceholderStatement",
                  "src": "2820:1:15"
                }
              ]
            },
            "documentation": {
              "id": 8261,
              "nodeType": "StructuredDocumentation",
              "src": "2559:167:15",
              "text": " @dev Also add a modifier that doesn't create a lock, but protects functions that\n      should not be called while a _lock_ function is running"
            },
            "id": 8272,
            "name": "viewlock",
            "nodeType": "ModifierDefinition",
            "overrides": null,
            "parameters": {
              "id": 8262,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2749:2:15"
            },
            "src": "2732:97:15",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 8274,
        "src": "831:2000:15"
      }
    ],
    "src": "45:2787:15"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/home/vyper/Downloads/Work Projects/avengers/kalancer-action/contracts/test/KalancerReentrancyGuard.sol",
      "exportedSymbols": {
        "KalancerReentrancyGuard": [
          8273
        ]
      },
      "license": "GPL-3.0-or-later"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "0.6",
            ".12"
          ]
        },
        "id": 8223,
        "name": "PragmaDirective",
        "src": "45:23:15"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            8273
          ],
          "name": "KalancerReentrancyGuard",
          "scope": 8274
        },
        "children": [
          {
            "attributes": {
              "text": " @author Kalancer Labs (and OpenZeppelin)\n @title Protect against reentrant calls (and also selectively protect view functions)\n @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `_lock_` guard, functions marked as\n `_lock_` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `_lock_` entry\n points to them.\n Also adds a _lockview_ modifier, which doesn't create a lock, but fails\n   if another _lock_ call is in progress"
            },
            "id": 8224,
            "name": "StructuredDocumentation",
            "src": "70:760:15"
          },
          {
            "attributes": {
              "constant": true,
              "mutability": "constant",
              "name": "_NOT_ENTERED",
              "overrides": null,
              "scope": 8273,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint",
                  "type": "uint256"
                },
                "id": 8225,
                "name": "ElementaryTypeName",
                "src": "1618:4:15"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "31",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "number",
                  "type": "int_const 1",
                  "value": "1"
                },
                "id": 8226,
                "name": "Literal",
                "src": "1655:1:15"
              }
            ],
            "id": 8227,
            "name": "VariableDeclaration",
            "src": "1618:38:15"
          },
          {
            "attributes": {
              "constant": true,
              "mutability": "constant",
              "name": "_ENTERED",
              "overrides": null,
              "scope": 8273,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint",
                  "type": "uint256"
                },
                "id": 8228,
                "name": "ElementaryTypeName",
                "src": "1662:4:15"
              },
              {
                "attributes": {
                  "argumentTypes": null,
                  "hexvalue": "32",
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "subdenomination": null,
                  "token": "number",
                  "type": "int_const 2",
                  "value": "2"
                },
                "id": 8229,
                "name": "Literal",
                "src": "1695:1:15"
              }
            ],
            "id": 8230,
            "name": "VariableDeclaration",
            "src": "1662:34:15"
          },
          {
            "attributes": {
              "constant": false,
              "mutability": "mutable",
              "name": "_status",
              "overrides": null,
              "scope": 8273,
              "stateVariable": true,
              "storageLocation": "default",
              "type": "uint256",
              "value": null,
              "visibility": "private"
            },
            "children": [
              {
                "attributes": {
                  "name": "uint",
                  "type": "uint256"
                },
                "id": 8231,
                "name": "ElementaryTypeName",
                "src": "1703:4:15"
              }
            ],
            "id": 8232,
            "name": "VariableDeclaration",
            "src": "1703:20:15"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": true,
              "kind": "constructor",
              "modifiers": [
                null
              ],
              "name": "",
              "overrides": null,
              "scope": 8273,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 8233,
                "name": "ParameterList",
                "src": "1742:2:15"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 8234,
                "name": "ParameterList",
                "src": "1754:0:15"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 8232,
                              "type": "uint256",
                              "value": "_status"
                            },
                            "id": 8235,
                            "name": "Identifier",
                            "src": "1764:7:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 8227,
                              "type": "uint256",
                              "value": "_NOT_ENTERED"
                            },
                            "id": 8236,
                            "name": "Identifier",
                            "src": "1774:12:15"
                          }
                        ],
                        "id": 8237,
                        "name": "Assignment",
                        "src": "1764:22:15"
                      }
                    ],
                    "id": 8238,
                    "name": "ExpressionStatement",
                    "src": "1764:22:15"
                  }
                ],
                "id": 8239,
                "name": "Block",
                "src": "1754:39:15"
              }
            ],
            "id": 8240,
            "name": "FunctionDefinition",
            "src": "1730:63:15"
          },
          {
            "attributes": {
              "name": "lock",
              "overrides": null,
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `_lock_` function from another `_lock_`\n function is not supported. It is possible to prevent this from happening\n by making the `_lock_` function external, and make it call a\n `private` function that does the actual work."
                },
                "id": 8241,
                "name": "StructuredDocumentation",
                "src": "1799:346:15"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 8242,
                "name": "ParameterList",
                "src": "2163:2:15"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "tryCall": false,
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_8186a91a8af60eddd7d544682e1b6922f650fc04d86fd0e4ee40391168ca67e4",
                                  "typeString": "literal_string \"ERR_REENTRY\""
                                }
                              ],
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "type": "function (bool,string memory) pure",
                              "value": "require"
                            },
                            "id": 8243,
                            "name": "Identifier",
                            "src": "2241:7:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "!=",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 8232,
                                  "type": "uint256",
                                  "value": "_status"
                                },
                                "id": 8244,
                                "name": "Identifier",
                                "src": "2249:7:15"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 8230,
                                  "type": "uint256",
                                  "value": "_ENTERED"
                                },
                                "id": 8245,
                                "name": "Identifier",
                                "src": "2260:8:15"
                              }
                            ],
                            "id": 8246,
                            "name": "BinaryOperation",
                            "src": "2249:19:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4552525f5245454e545259",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"ERR_REENTRY\"",
                              "value": "ERR_REENTRY"
                            },
                            "id": 8247,
                            "name": "Literal",
                            "src": "2270:13:15"
                          }
                        ],
                        "id": 8248,
                        "name": "FunctionCall",
                        "src": "2241:43:15"
                      }
                    ],
                    "id": 8249,
                    "name": "ExpressionStatement",
                    "src": "2241:43:15"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 8232,
                              "type": "uint256",
                              "value": "_status"
                            },
                            "id": 8250,
                            "name": "Identifier",
                            "src": "2353:7:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 8230,
                              "type": "uint256",
                              "value": "_ENTERED"
                            },
                            "id": 8251,
                            "name": "Identifier",
                            "src": "2363:8:15"
                          }
                        ],
                        "id": 8252,
                        "name": "Assignment",
                        "src": "2353:18:15"
                      }
                    ],
                    "id": 8253,
                    "name": "ExpressionStatement",
                    "src": "2353:18:15"
                  },
                  {
                    "id": 8254,
                    "name": "PlaceholderStatement",
                    "src": "2381:1:15"
                  },
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 8232,
                              "type": "uint256",
                              "value": "_status"
                            },
                            "id": 8255,
                            "name": "Identifier",
                            "src": "2524:7:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 8227,
                              "type": "uint256",
                              "value": "_NOT_ENTERED"
                            },
                            "id": 8256,
                            "name": "Identifier",
                            "src": "2534:12:15"
                          }
                        ],
                        "id": 8257,
                        "name": "Assignment",
                        "src": "2524:22:15"
                      }
                    ],
                    "id": 8258,
                    "name": "ExpressionStatement",
                    "src": "2524:22:15"
                  }
                ],
                "id": 8259,
                "name": "Block",
                "src": "2166:387:15"
              }
            ],
            "id": 8260,
            "name": "ModifierDefinition",
            "src": "2150:403:15"
          },
          {
            "attributes": {
              "name": "viewlock",
              "overrides": null,
              "virtual": false,
              "visibility": "internal"
            },
            "children": [
              {
                "attributes": {
                  "text": " @dev Also add a modifier that doesn't create a lock, but protects functions that\n      should not be called while a _lock_ function is running"
                },
                "id": 8261,
                "name": "StructuredDocumentation",
                "src": "2559:167:15"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 8262,
                "name": "ParameterList",
                "src": "2749:2:15"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "isStructConstructorCall": false,
                          "lValueRequested": false,
                          "names": [
                            null
                          ],
                          "tryCall": false,
                          "type": "tuple()",
                          "type_conversion": false
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_stringliteral_90d44b4d073c5a7a1a92e18ca806eb93602df9353ab337b45f16cd7ce4401c34",
                                  "typeString": "literal_string \"ERR_REENTRY_VIEW\""
                                }
                              ],
                              "overloadedDeclarations": [
                                -18,
                                -18
                              ],
                              "referencedDeclaration": -18,
                              "type": "function (bool,string memory) pure",
                              "value": "require"
                            },
                            "id": 8263,
                            "name": "Identifier",
                            "src": "2762:7:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "operator": "!=",
                              "type": "bool"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 8232,
                                  "type": "uint256",
                                  "value": "_status"
                                },
                                "id": 8264,
                                "name": "Identifier",
                                "src": "2770:7:15"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 8230,
                                  "type": "uint256",
                                  "value": "_ENTERED"
                                },
                                "id": 8265,
                                "name": "Identifier",
                                "src": "2781:8:15"
                              }
                            ],
                            "id": 8266,
                            "name": "BinaryOperation",
                            "src": "2770:19:15"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "4552525f5245454e5452595f56494557",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "string",
                              "type": "literal_string \"ERR_REENTRY_VIEW\"",
                              "value": "ERR_REENTRY_VIEW"
                            },
                            "id": 8267,
                            "name": "Literal",
                            "src": "2791:18:15"
                          }
                        ],
                        "id": 8268,
                        "name": "FunctionCall",
                        "src": "2762:48:15"
                      }
                    ],
                    "id": 8269,
                    "name": "ExpressionStatement",
                    "src": "2762:48:15"
                  },
                  {
                    "id": 8270,
                    "name": "PlaceholderStatement",
                    "src": "2820:1:15"
                  }
                ],
                "id": 8271,
                "name": "Block",
                "src": "2752:77:15"
              }
            ],
            "id": 8272,
            "name": "ModifierDefinition",
            "src": "2732:97:15"
          }
        ],
        "id": 8273,
        "name": "ContractDefinition",
        "src": "831:2000:15"
      }
    ],
    "id": 8274,
    "name": "SourceUnit",
    "src": "45:2787:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.12+commit.27d51765.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-03-26T12:33:52.947Z",
  "devdoc": {
    "author": "Kalancer Labs (and OpenZeppelin)",
    "details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {_lock_} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `_lock_` guard, functions marked as `_lock_` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `_lock_` entry points to them. Also adds a _lockview_ modifier, which doesn't create a lock, but fails   if another _lock_ call is in progress",
    "kind": "dev",
    "methods": {},
    "title": "Protect against reentrant calls (and also selectively protect view functions)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}